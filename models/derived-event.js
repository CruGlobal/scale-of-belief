'use strict'

// This file should be kept up to date with
// https://github.com/CruGlobal/snowplow-dataflow/blob/master/playbooks/derived-events-model/01-derived-events/02-select-events.sql

const { indexOf, isEmpty } = require('lodash')

const BotUAFamily = 'Robot/Spider'

// https://discourse.snowplowanalytics.com/t/excluding-bots-from-queries-in-redshift-tutorial/127
const BotUAPattern = new RegExp('(' + [
  'bot',
  'crawl',
  'slurp',
  'spider',
  'archiv',
  'spinn',
  'sniff',
  'seo',
  'audit',
  'survey',
  'pingdom',
  'worm',
  'capture',
  '(browser|screen)shots',
  'analyz',
  'index',
  'thumb',
  'check',
  'facebook',
  'YandexBot',
  'Twitterbot',
  'a_archiver',
  'facebookexternalhit',
  'Bingbot',
  'Googlebot',
  'Baiduspider',
  '360(Spider|User-agent)',
  'semalt',
  'googleweblight'
].join('|') + ')')

// https://github.com/CruGlobal/snowplow-dataflow/blob/master/playbooks/derived-events-model/01-derived-events/02-select-events.sql
const DevTestPattern = new RegExp('(' + [
  '([0-9]*\\.){3}',
  'stag(e|ing)',
  'dev(\\.|-)',
  'local(\\.|host)',
  'test',
  'author',
  'demo',
  '-dev',
  'proddis',
  'server',
  'proxy',
  'facebook',
  'google',
  'spectrum',
  's3',
  '\\.aws\\.',
  'amazonaws',
  'cloudfront',
  'addclick',
  'doubleclick',
  'wdssa',
  'cas[0-9]?\\.internal',
  'cdn[0-9]?',
  '(io|co)-web',
  'xxx',
  'sex',
  'porn'
].join('|') + ')')

const BadHostnames = [
  '0s.o53xo.nvuxe43uovsgk3tun53c4y3pnu.cmle.ru',
  '47887-525081-raikfcquaxqncofqfm.stackpathdns.com',
  'sample',
  'gizoogle.net',
  'www.translatoruser.net',
  'unitedwithisrael.org',
  'web.archive.org',
  'searchenginereports.net',
  'ow.ly',
  'aemcommunitysite.com',
  'cruwp.agapefance.fr',
  'www.waybackmachinedownloader.com'
]

class DerivedEvent {
  static ensureValid (event) {
    // Check if event was generated by a Bot or Spider and ignore it
    if (event.br_family === BotUAFamily ||
      (typeof event.useragent === 'string' && event.useragent.match(BotUAPattern) !== null)) {
      throw new InvalidDerivedEventError(`Event (${event.event_id}) generated by a robot/spider (${event.useragent}).`)
    }

    // Check if event had a Test, Development or Bad app_id and ignore it
    if (isEmpty(event.app_id) || event.app_id === '-web' ||
      (typeof event.app_id === 'string' && event.app_id.match(DevTestPattern) !== null)) {
      throw new InvalidDerivedEventError(`Event (${event.event_id}) has a bad app_id (${event.app_id}).`)
    }

    // Check if event had a Test, Development or Bad page_urlhost and ignore it
    if (indexOf(BadHostnames, event.page_urlhost) > -1 ||
      (typeof event.page_urlhost === 'string' && event.page_urlhost.match(DevTestPattern) !== null)) {
      throw new InvalidDerivedEventError(`Event (${event.event_id}) has a bad page_urlhost (${event.page_urlhost}).`)
    }

    return true
  }
}

class InvalidDerivedEventError extends Error {}

DerivedEvent.InvalidDerivedEventError = InvalidDerivedEventError

module.exports = DerivedEvent
