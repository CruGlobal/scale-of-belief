service: scale-of-belief

custom:
  scripts:
    hooks:
      # Run database migrations
      'aws:deploy:finalize:cleanup': 'npx serverless --stage $ENVIRONMENT invoke --function migrate'
  environmentMap:
    production: prod
    staging: stage
    development: dev
    lab: lab

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${env:ENVIRONMENT}
  region: us-east-1
  vpc:
    securityGroupIds:
      - ${file(${env:ECS_CONFIG}/bin/vars.yml):us-east-1.webapp_elb_sg}
    subnetIds: ${file(${env:ECS_CONFIG}/bin/vars.yml):us-east-1.prod_apps_1_all}
  stackTags:
    Name: ${env:PROJECT_NAME}-${self:custom.environmentMap.${env:ENVIRONMENT}}
    owner: udp-support@cru.org
    application: ${env:PROJECT_NAME}
    env: ${self:custom.environmentMap.${env:ENVIRONMENT}}
    managed_by: serverless-framework
    function: lambda
  iamRoleStatements:
    - Effect: Allow
      Action:
        - SNS:Publish
        - SNS:Subscribe
      Resource:
        - ${env:SNS_TOPIC_ARN}
        - ${env:AEM_SNS_TOPIC_ARN}
    - Effect: Allow
      Action:
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
        - sqs:ChangeMessageVisibility
        - sqs:SendMessage
      Resource:
        Fn::GetAtt: [ UDPEnrichedEventsQueue, Arn ]
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource:
        - arn:aws:s3:::uri-scoring
        - arn:aws:s3:::uri-scoring/*
  environment: ${file(serverless/environment.js)}

functions:
  api:
    handler: api/index.handler
    timeout: 30
    events:
      - http:
          path: /api/{any+}
          method: ANY
          cors:
            origin: '*'
            maxAge: 86400
  migrate:
    handler: db/migrate.handler
    timeout: 120
  redshift:
    handler: scheduled/redshift.handler
    timeout: 300
    events:
      - schedule: rate(5 minutes)
  campaign:
    handler: sns/campaign.handler
    timeout: 60
    events:
      - sns: ${env:SNS_TOPIC_ARN}
  global-registry:
    handler: sns/global-registry.handler
    timeout: 30
    events:
      - sns: ${env:SNS_TOPIC_ARN}
  cru-org-sync:
    handler: scheduled/cru-org-sync.handler
    timeout: 300
    events:
      - schedule: rate(4 hours)
  sync-score:
    handler: sns/sync-score.handler
    timeout: 30
    events:
      - sns: ${env:AEM_SNS_TOPIC_ARN}
  udp-event:
    handler: sqs/udp-event.handler
    reservedConcurrency: 1
    timeout: 300
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ UDPEnrichedEventsQueue, Arn ]
          batchSize: 10
          enabled: true

package:
  exclude:
    - .git/**
    - test/**
    - '**/*.test.js'
    - '**/*.sql'
    - .deployment/**

plugins:
  - serverless-plugin-bind-deployment-id
  - serverless-plugin-scripts
  - serverless-offline

resources:
  Resources:
    IamRoleLambdaExecution:
      Properties:
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess

    S3BucketAppPublic:
      Type: 'AWS::S3::Bucket'
      Properties:
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
        BucketName:
          Fn::Join: ['', [Ref: AWS::StackName, "-app-public"]]

    ApiGatewayRestApi:
      Properties:
        Name:
          Ref: AWS::StackName
        BinaryMediaTypes:
          - 'image/*'

    ApiGatewayMethodAppGet:
      Type: 'AWS::ApiGateway::Method'
      Properties:
        HttpMethod: GET
        ResourceId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        RestApiId:
          Ref: ApiGatewayRestApi
        ApiKeyRequired: false
        AuthorizationType: NONE
        Integration:
          Type: HTTP_PROXY
          Uri:
            Fn::Join: ['', [Fn::GetAtt: [S3BucketAppPublic, WebsiteURL], '/index.html']]
          PassthroughBehavior: WHEN_NO_MATCH
          IntegrationHttpMethod: GET
      DependsOn:
        - S3BucketAppPublic

    ApiGatewayResourceAppProxy:
      Type: 'AWS::ApiGateway::Resource'
      Properties:
        ParentId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        PathPart: '{proxy+}'
        RestApiId:
          Ref: ApiGatewayRestApi

    ApiGatewayMethodAppProxyAny:
      Type: 'AWS::ApiGateway::Method'
      Properties:
        HttpMethod: ANY
        ResourceId:
          Ref: ApiGatewayResourceAppProxy
        RestApiId:
          Ref: ApiGatewayRestApi
        ApiKeyRequired: false
        AuthorizationType: NONE
        RequestParameters:
          method.request.path.proxy: true
        Integration:
          Type: HTTP_PROXY
          Uri:
            Fn::Join: ['', [Fn::GetAtt: [S3BucketAppPublic, WebsiteURL], '/{proxy}']]
          PassthroughBehavior: WHEN_NO_MATCH
          IntegrationHttpMethod: GET
          RequestParameters:
            integration.request.path.proxy: method.request.path.proxy
      DependsOn:
        - S3BucketAppPublic

    ApiGatewayResourcePathMapping:
      Type: 'AWS::ApiGateway::BasePathMapping'
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        DomainName: 'content-scoring.cru.org'
        Stage: ${opt:stage}
      DependsOn:
        - __deployment__

    __deployment__:
      DependsOn:
        - ApiGatewayMethodApiAnyVarAny
        - ApiGatewayMethodAppGet
        - ApiGatewayMethodAppProxyAny

    UDPEnrichedEventsDLQ:
      Type: AWS::SQS::Queue

    UDPEnrichedEventsQueue:
      Type: AWS::SQS::Queue
      Properties:
        # See https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-queueconfig
        MessageRetentionPeriod: 604800 # 7 days
        VisibilityTimeout: 2100 # 300s lambda timeout * 6
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [ UDPEnrichedEventsDLQ, Arn ]
          maxReceiveCount: 5

    # This policy grants SQS:SendMessage to the snowplow sub-account
    SnowplowEventsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: SnowplowEventsQueuePolicy
          Version: '2012-10-17'
          Statement:
            - Sid: Allow-Snowplow-SendMessage
              Effect: Allow
              Principal:
                AWS:
                  - 699385956789
                  - 056154071827
              Action:
                - sqs:SendMessage
              Resource: "*"
        Queues:
          - Ref: UDPEnrichedEventsQueue

  Outputs:
    AppBucket:
      Value:
        Ref: S3BucketAppPublic

